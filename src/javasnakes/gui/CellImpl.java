/*
 * This source belongs to the Snake and Ladder project of GROUP 1
 * of CPE 316 (Artificial Intelligence) class of 2010/2011 session at the
 * department of computer science and engineering, Obafemi Awolowo University
 * Ile-Ife.
 * This source file should not be used out of this context and it remains an
 * property of both the department and the people involved.
 */

/*
 * CellImpl.java
 *
 * Created on Oct 14, 2011, 2:51:45 AM
 */

package javasnakes.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javasnakes.model.Cell;
import javasnakes.model.GlobalConstants;
import javasnakes.model.Player;
import javasnakes.model.Seed;
import javax.imageio.ImageIO;

/**
 * A JPanel that implements the cell interface. This class acts as a service
 * provider for the cell service as specified in the 
 * <code><i>codebase</i>.api.Cell</code> interface.
 *
 * @author Group 1, CPE 316 (2010/2011)
 * @version 1.0
 */
public class CellImpl extends javax.swing.JPanel implements Cell {
    /**The address of this cell*/
    private int address;

    private List<Player> players = new ArrayList<Player>();
    
    public static Image BLACK_SEED_IMAGE;
    public static Image RED_SEED_IMAGE;

    /** Creates new form CellImpl */
    public CellImpl() {
        try {
            BLACK_SEED_IMAGE = ImageIO.read(getClass().getResourceAsStream("/black_seed.png"));
            RED_SEED_IMAGE = ImageIO.read(getClass().getResourceAsStream("/red_seed.png"));
        } catch (IOException ex) {
            Logger.getLogger(CellImpl.class.getName()).log(Level.SEVERE, "Unable to load the seed.", ex);
        }
        
        initComponents();
	
	Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
	int height = screen.height - 58;
	int width = (int) (0.65 * screen.width);
	setPreferredSize(new Dimension(width / 10, height / 10));
    }

    /**
     * initializes a new cell with the given address.
     * @param address the cell address.
     */
    public CellImpl(int address) {
        this();
        this.address = address;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(40, 40));
        setPreferredSize(new java.awt.Dimension(60, 60));
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public Player[] getContent() {
        return this.players.toArray(new Player[2]);
    }

    @Override
    public int getAddress() {
        return this.address;
    }

    @Override
    /** 
     * Places the specified player on this cell. This does not necessarily
     * displace the seed previously occupying this cell (if any) as expected in
     * a ludo game. However in this game, a maximum of two seeds are expected on
     * a cell because it is a two player game so, in a case where there are
     * already two seeds on a cell, the last one will be knocked off and 
     * replaced by the new seed.
     */
    public void placePlayer(Player player) {
        players.add(player);
    }

    @Override
    public void removePlayer(Player player) {
        players.remove(player);
    }

    @Override
    public int getPlayerCount() {
        return players.size();
    }

    @Override
    public void setAddress(int address) {
        this.address = address;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2D = (Graphics2D) g;
        g2D.setRenderingHints(GlobalConstants.qualityHints);

        //provides for applying a background to every cell
        Image wallpaper = null;
	try {
	    wallpaper 
		    = ImageIO.read(getClass().getResourceAsStream("/cell.jpg"));
	} catch (IOException ex) {
	    Logger.getLogger(CellImpl.class.getName()).log(Level.SEVERE, 
		    null, ex);
	}

        g2D.setFont(new Font("Arial", Font.BOLD, 14));
        //g2D.setColor(new java.awt.Color(0, 100, 0));
        g2D.drawString(Integer.toString(address + 1), 10, 20);
        
        int myX = 10;
        for (Player element : players) {
            if (element.getSeed() == Seed.BLACK_SEED) {
                g2D.setColor(Color.BLACK);
                g2D.drawImage(BLACK_SEED_IMAGE, myX, 15, 40, 40, this);
            } else {
                g2D.setColor(Color.RED);
                g2D.drawImage(RED_SEED_IMAGE, myX, 15, 40, 40, this);
            }
            //g2D.fillOval(myX, 15, 30, 30);
            myX += 15;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public int hashCode() {
	int hash = 3;
	hash = 71 * hash + this.address;
	return hash;
    }

    @Override
    public boolean equals(Object obj) {
	if (obj == null) {
	    return false;
	}
	if (getClass() != obj.getClass()) {
	    return false;
	}
	final CellImpl other = (CellImpl) obj;
	if (this.address != other.address) {
	    return false;
	}
	return true;
    }

}
